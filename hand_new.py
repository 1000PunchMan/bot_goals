from aiogram import F, Router
from aiogram.filters import CommandStart,Command
from aiogram.types import Message,FSInputFile, BotCommand
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state, State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher
from keybords import direction, direction_social,direction_health,direction_finance,direction_ds
from lexicon_ru import LEXICON_RU
from points_for_actions import POINTS
from func import write_to_databse, bar_points
import pandas as pd
from datetime import datetime, date


API_TOKEN = '7923040381:AAGq_IWqljso21A6M1z_Ey6qXZl7LplIQnA'
state_for_database = True
file_path = 'data_history_prod.csv'


bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–∞–º—è—Ç—å –¥–ª—è FSM


async def set_main_menu(bot: Bot):

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –∫–Ω–æ–ø–∫–∏ menu
    main_menu_commands = [
        BotCommand(command='/start',
                   description='–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'),
        BotCommand(command='/points',
                   description='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∑–∞ –¥–µ–π—Å—Ç–≤–∏—è')
    ]

    await bot.set_my_commands(main_menu_commands)




# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class UserInputState(StatesGroup):
    touch_quantity = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ 'touch'
    flinch_points = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—á–∫–æ–≤ –¥–ª—è flinch
    flinch_desc = State()

    book_quantity = State()   # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ 'social_book'
    ds_quantity = State()
    english_quantity = State()
    finance_quantity = State()

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
async def process_category(
        message: Message,
        category: str,
        sub_category: str,
        points_key: str,
        quantity: int,
        state_for_database: bool = False,
        description: str = None
        ):
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤1
    if points_key == 'flinch':
        total_points = quantity
    else:
        total_points = POINTS[points_key] * quantity


    if API_TOKEN == '7923040381:AAGq_IWqljso21A6M1z_Ey6qXZl7LplIQnA':
        state_for_database = True


    # –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    write_to_databse(LEXICON_RU[category], sub_category, total_points, quantity,state_for_database,description)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    #text = f'''–ë—Ä–∞—Ç–∏—à–∫–∞, —Ç—ã —Å—Ç–∞–ª –º–æ—â–Ω–µ–µ –Ω–∞ {total_points} –æ—á–∫–æ–≤.\n–¢—ã –∫—Ä–∞—Å–∞–≤–∞, —Ç–æ–ª—å–∫–æ –≤–ø–µ—Ä–µ–¥! –Ø –≥–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π!üöÄüöÄüöÄ'''
    colnames =  ['datetime', 'direction','sub_direction', 'points','action','description']

    df = pd.read_csv(file_path, header=None, encoding='utf-8', names=colnames)
    df['datetime'] = pd.to_datetime(df['datetime']).dt.date
    df['month'] = pd.to_datetime(df['datetime']).dt.month
    df['week'] = df['datetime'].apply(lambda x: x.isocalendar()[1])

    today = pd.to_datetime(date.today())
    current_month = today.month
    current_week = today.isocalendar()[1]

    today_points = df[(df['datetime'] == today.date())]['points'].sum()

    points_per_year = df['points'].sum()
    points_per_month = df[df['month'] == current_month]['points'].sum()
    points_per_week = df[df['week'] == current_week]['points'].sum()


    text = f'–ö—Ä–∞—Å–∞–≤—á–∏–∫, –∑–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—É—á–∞–µ—à—å {total_points} –æ—á–∫–æ–≤üöÄ\n–°–µ–≥–æ–¥–Ω—è —Ç—ã —Å—Ç–∞–ª –ª—É—á—à–µ —Å–µ–±—è –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –Ω–∞ {today_points} –æ—á–∫–æ–≤.\n–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!'


    # –°–æ–∑–¥–∞—ë–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    bar_points(points_per_year,points_per_month,points_per_week)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await message.answer(text)

    photo = FSInputFile('bar_chart.png')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    await message.answer_photo(photo)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞–∫ –≤ /start
    await message.answer(
        text='–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
        reply_markup=direction
    )


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(text=LEXICON_RU['/start'], reply_markup=direction)



@dp.message(Command(commands='points'))
async def del_main_menu(message: Message):
    text = ''
    for key,value in POINTS.items():
        text += f'{LEXICON_RU[key]} - {value}\n'
    #print(text)

    await message.answer(text=text)


# Social
@dp.message(F.text == LEXICON_RU['social'])
async def process_yes_answer(message: Message):
    await message.answer(text=f'''–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è {LEXICON_RU['social']}\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é''',
                          reply_markup=direction_social)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@dp.message(F.text == LEXICON_RU['courses'])
async def process_courses(message: Message):
    await process_category(message, 'social', LEXICON_RU['courses'], 'courses', 1)

@dp.message(F.text == LEXICON_RU['meeting'])
async def process_meeting(message: Message):
    await process_category(message, 'social', LEXICON_RU['meeting'], 'meeting', 1)

@dp.message(F.text == LEXICON_RU['sex'])
async def process_sex(message: Message):
    await process_category(message, 'social', LEXICON_RU['sex'], 'sex', 1)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ 'touch'
@dp.message(F.text == LEXICON_RU['touch'])
async def process_touch(message: Message, state: FSMContext):
    await message.answer('–ë—Ä–∞—Ç–∏—à–∫–∞, –∫–æ–ª–∏—Å—å, —Å–∫–æ–ª—å–∫–æ –¥–µ–≤—É—à–µ–∫ –æ—Ö–º—É—Ä–∏–ª —Å–≤–æ–∏–º –ø–æ–¥—Ö–æ–¥–æ–º?\n–¢—ã –ø–∏–∑–¥–µ—Ü –∫—Ä–∞—Å–∞–≤—á–∏–∫!!!')
    await state.set_state(UserInputState.touch_quantity)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è 'touch'
@dp.message(UserInputState.touch_quantity)
async def handle_touch_quantity(message: Message, state: FSMContext):
    try:
        quantity = int(message.text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∏—Å–ª–æ

        if quantity <= 0:
            await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.")
            return

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await process_category(message, 'social', LEXICON_RU['touch'], 'touch', quantity)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except Exception as e:
        await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ 'social_book'
@dp.message(F.text == LEXICON_RU['social_book'])
async def process_social_book(message: Message, state: FSMContext):
    await message.answer('–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —á–∏—Ç–∞–ª/–º–µ–¥–∏—Ç–∏—Ä–æ–≤–∞–ª, –∫—Ä–∞—Å–∞–≤—á–∏–∫?\n–ü–æ–º–Ω–∏, —á—Ç–æ –≤—Å–µ –≤ —Ç–≤–æ–µ–π –≥–æ–ª–æ–≤–µ, –Ω–∞—à–µ –º—ã—à–ª–µ–Ω–∏–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –Ω–∞—à–∏ —ç–º–æ—Ü–∏–∏!!!')
    await state.set_state(UserInputState.book_quantity)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è 'social_book'
@dp.message(UserInputState.book_quantity)
async def handle_book_quantity(message: Message, state: FSMContext):
    try:
        quantity = int(message.text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∏—Å–ª–æ

        if quantity <= 0:
            await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.")
            return

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await process_category(message, 'social', LEXICON_RU['social_book'], 'social_book', quantity)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ —á–∏—Å–ª–æ.")

@dp.message(F.text == LEXICON_RU['other_flinch'])
async def process_flinch(message: Message, state: FSMContext):
    await message.answer('–ë—Ä–∞—Ç–∏—à–∫–∞, –≤–≤–µ–¥–∏ —Å–∫–æ–ª—å–∫–æ –æ—á–∫–æ–≤ —Ç—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª')
    await state.set_state(UserInputState.flinch_points)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞


@dp.message(UserInputState.flinch_points)
async def handle_flich_desc(message: Message, state: FSMContext):
    await message.answer('–ë—Ä–∞—Ç–∞–Ω—á–∏–∫, –∫—Ä–∞—Å–∞–≤—á–∏–∫! –í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ.\n\n –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ö–æ–¥, —Ç–æ –Ω–∞–ø–∏—à–∏ –ò–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, x/10 –∫—Ä–∞—Å–æ—Ç–∞, —Ö/10 —ç–º–æ—Ü–∏–∏')
    await state.update_data(points=message.text)

    print(await state.get_data())
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
    #await process_category(message, 'social', LEXICON_RU['other_flinch'], 'flinch', )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    #await state.clear()

    await state.set_state(UserInputState.flinch_desc)


@dp.message(UserInputState.flinch_desc)
async def handle_flich_func(message: Message, state: FSMContext):
    await message.answer('–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, —Ç—ã –∫—Ä–∞—Å–∞–≤—á–∏–∫!')
    await state.update_data(desc=message.text)

    data = await state.get_data()
    points_value = data.get('points')
    desc_value = data.get('desc')

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await process_category(message, 'social', LEXICON_RU['other_flinch'], 'flinch', points_value, description=desc_value)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()







# Health
# 'training': '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
# 'stretching': '–†–∞—Å—Ç—è–∂–∫–∞',
# 'eating': '–ó–∞–≤—Ç—Ä–∞–∫ + –≤–∏—Ç–∞–º–∏–Ω—ã'

@dp.message(F.text == LEXICON_RU['health'])
async def process_health(message: Message):
    await message.answer(text=f'''–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è {LEXICON_RU['health']}\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é''',
                          reply_markup=direction_health)

@dp.message(F.text == LEXICON_RU['training'])
async def process_training(message: Message):
    await process_category(message, 'health', LEXICON_RU['training'], 'training', 1)

@dp.message(F.text == LEXICON_RU['eating'])
async def process_eating(message: Message):
    await process_category(message, 'health', LEXICON_RU['eating'], 'eating', 1)

@dp.message(F.text == LEXICON_RU['stretching'])
async def process_stretching(message: Message):
    await message.answer('–ë—Ä–∞—Ç–∫–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω—É–∂–Ω–æ —Ä–∞–∑–º–∏–Ω–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –Ω–µ –±—ã—Ç—å –≥–æ—Ä–±–∞—Ç—ã–º —á–µ–ø—É—Ö–æ–º!\n–ü–æ–º–Ω–∏, —á—Ç–æ —Ä–∞–±–æ—Ç–∞ - —ç—Ç–æ –ª–∏—à—å —Å—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞, –Ω–µ –Ω—É–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ –Ω–µ—ë.')
    await process_category(message, 'health', LEXICON_RU['stretching'], 'stretching', 1)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞



# Studing
# 'ds_python_studing': 'DS/Math/Dev –º–∏–Ω. –æ–±—É—á–µ–Ω–∏—è',
# 'english': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π'

@dp.message(F.text == LEXICON_RU['studing'])
async def process_health(message: Message):
    await message.answer(text=f'''–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è {LEXICON_RU['studing']}\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é''',
                          reply_markup=direction_ds)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ 'ds_python_studing'
@dp.message(F.text == LEXICON_RU['ds_python_studing'])
async def process_ds(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –æ–±—É—á–µ–Ω–∏—è.\n–¢–∏–≥—Ä, –∫—Ä–∞—Å–∞–≤—á–∏–∫, —á—Ç–æ –ø–æ—É—á–∏–ª—Å—è. –ü–æ–º–Ω–∏, —á—Ç–æ —É—á–µ–±–∞ –ø–æ–≤—ã—à–∞–µ—Ç —Ç–≤–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º.\n–ü—Ä–∏ —ç—Ç–æ–º –Ω—É–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–∞–ª–∞–Ω—Å —Ä–∞–±–æ—Ç—ã –∏ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏. –ü–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ —É—á–∏—Ç—å—Å—è –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.')
    await state.set_state(UserInputState.ds_quantity)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è 'ds_python_studing'
@dp.message(UserInputState.ds_quantity)
async def handle_ds_quantity(message: Message, state: FSMContext):
    try:
        quantity = int(message.text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∏—Å–ª–æ

        if quantity <= 0:
            await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.")
            return

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await process_category(message, 'studing', LEXICON_RU['ds_python_studing'], 'ds_python_studing', quantity)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ —á–∏—Å–ª–æ.")



@dp.message(F.text == LEXICON_RU['english'])
async def process_eng(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –æ–±—É—á–µ–Ω–∏—è.\n–ë—Ä–∞—Ç, –Ω—É–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞. –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ä—ã–Ω–æ–∫ - —ç—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–ø—É—Å—Ç—É.\n–ê–Ω–≥–ª–∏–π—Å–∫–∏–π - —ç—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π –Ω–∞–≤—ã–∫, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è –¥–æ—Ä–æ–∂–µ –Ω–∞ —Ä—ã–Ω–∫–µ —Ç—Ä—É–¥–∞, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª–µ–∑–µ–Ω –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö.')
    await state.set_state(UserInputState.english_quantity)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è 'ds_python_studing'
@dp.message(UserInputState.english_quantity)
async def handle_ds_quantity(message: Message, state: FSMContext):
    try:
        quantity = int(message.text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∏—Å–ª–æ

        if quantity <= 0:
            await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.")
            return

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await process_category(message, 'studing', LEXICON_RU['english'], 'english', quantity)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ —á–∏—Å–ª–æ.")



@dp.message(F.text == LEXICON_RU['finance'])
async def process_health(message: Message):
    await message.answer(text=f'''–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è {LEXICON_RU['finance']}\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é''',
                          reply_markup=direction_finance)


@dp.message(F.text == LEXICON_RU['finance_studing'])
async def process_finance(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –æ–±—É—á–µ–Ω–∏—è.\n–ü–∞—Å—Å–∏–≤–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ - —ç—Ç–æ –ø—Ä—è–º–æ–π –ø—É—Ç—å –∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—é –±–æ–≥–∞—Ç—Å—Ç–≤–∞. –° —Ä–æ—Å—Ç–æ–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π —Ä–∞—Å—Ç–µ—Ç –¥–æ—Ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ —á–µ—Ç–∫–æ —É–ø—Ä–∞–≤–ª—è—Ç—å.')
    await state.set_state(UserInputState.finance_quantity)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è 'ds_python_studing'
@dp.message(UserInputState.finance_quantity)
async def handle_finance_quantity(message: Message, state: FSMContext):
    try:
        quantity = int(message.text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∏—Å–ª–æ

        if quantity <= 0:
            await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.")
            return

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await process_category(message, 'finance', LEXICON_RU['finance_studing'], 'finance_studing', quantity)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ —á–∏—Å–ª–æ.")



if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    dp.startup.register(set_main_menu)
    dp.run_polling(bot,skip_updates=True)